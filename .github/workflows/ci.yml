name: application-deployment

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    name: test
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node.js (16)
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"

      - name: Install dependencies
        if: steps.node_modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Lint
        run: npm run lint:fix

      - name: Unit test coverage
        id: unit-test
        run: npm run test

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          RESULT: ${{ steps.unit-test.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Unit Test Coverage Report ðŸ“–\`${{ steps.unit-test.outcome }}\`
            <details><summary>Show Unit Test Coverage Report</summary>
            \`\`\`\n
            ${process.env.RESULT}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  build:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set image tag from github references
        id: image-tag
        run: |
          export SHORT_SHA=`echo ${{ github.sha }} | cut -c1-7`
          echo ::set-output name=tag::${SHORT_SHA}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.IAM_OIDC_ROLE }}
          role-session-name: OIDCSession
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Context for Buildx
        shell: bash
        run: |
          docker context create builders

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          endpoint: builders

      - name: Build app and push to ECR with ${{ steps.image-tag.outputs.tag }} tag
        uses: docker/build-push-action@v3.0.0
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.image-tag.outputs.tag }}
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }},${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          cache-to: type=inline
